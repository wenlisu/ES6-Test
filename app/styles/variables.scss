$body-bg:                               #f0f0f0 !default;
$max-width:                             720px !default;
$min-width:                             320px !default;

$font-family-global:                    PingFangSC-Regular, sans-serif,'微软雅黑',Microsoft YaHei,Tahoma,Arial !default;
$font-default-size:                     16px !default;

$text-default-color:                    #585858 !default;
$text-80parcen-color:                   rgba(88, 88, 88, 0.8) !default;
$text-60parcen-color:                   rgba(88, 88, 88, 0.6) !default;
$text-40parcen-color:                   rgba(88, 88, 88, 0.4) !default;
$text-20parcen-color:                   rgba(88, 88, 88, 0.2) !default;

$textBesic-80parcen-color:              rgba(60, 68, 85, 0.8) !default;
$textBesic-70parcen-color:              rgba(60, 68, 85, 0.7) !default;
$textBesic-family:                      PingFangSC-Regular !default;

$white:                                 #fff !default;
$black:                                 #000 !default;
$red:                                   #d21b35 !default;
$Orange:                                #ff9f25 !default;
$queqianme:                             #ff8500 !default;
$queqianme_fail:                        rgba(60, 68, 85, 0.5) !default;
$queqianme-80parcen-color:              rgba(255,133,0,0.8) !default;
$queqianme-60parcen-color:              rgba(255,133,0,0.6) !default;
$animation-duration:                    0s !default;

$tip-60parcen-color:                     rgba(0,0,0,0.6) !default;
$tip-80parcen-color:                     rgba(0,0,0,0.8) !default;

$input-placeholder-color:               $text-60parcen-color !default;

$border-default-color:                  #f5f5f9 !default;     

$wrapper-page:                          false !default;

$rem-baseline: 48.07px !default; /* 模拟窗为iphone6 */
$rem-fallback: true !default;
$rem-px-only: false !default;

/* rem */
@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}
